# GRADCAM used for highlighing Potential parts of images through Heatmaps with Probabilities 

import torch
import torch.nn.functional as F
import numpy as np
import matplotlib.pyplot as plt
import cv2

# Function to get Class Activation Map (CAM)
def getCAM(feature_conv, weight_fc, class_idx):
    _, nc, h, w = feature_conv.shape
    cam = weight_fc[class_idx].dot(feature_conv[0, :, :, :].reshape((nc, h * w)))
    cam = cam.reshape(h, w)
    cam = cam - np.min(cam)
    cam_img = cam / np.max(cam)
    return cam_img

# Extract the weights of the final fully connected layer
weight_softmax_params = list(model._modules.get('fc').parameters())
weight_softmax = np.squeeze(weight_softmax_params[0].cpu().data.numpy())

# Register a hook to capture the features of the final layer
class SaveFeatures():
    def __init__(self, m):
        self.hook = m.register_forward_hook(self.hook_fn)
    def hook_fn(self, module, input, output):
        self.features = output.cpu().data.numpy()
    def remove(self):
        self.hook.remove()

# Attach hook to the final layer
final_layer = model._modules.get('Mixed_7c')
activated_features = SaveFeatures(final_layer)

# Forward pass for all images
output = model(data)
probabilities = F.softmax(output, dim=1).data.squeeze()
pred_idx = np.argmax(probabilities.cpu().detach().numpy(), axis=1)
labels = pred_idx
activated_features.remove()

# Convert images to NumPy array and generate heatmaps
cur_images = data.cpu().numpy().transpose((0, 2, 3, 1))
heatmaps = []

# Ensure that the heatmaps are generated for each image
for i in range(len(cur_images)):
    img = getCAM(activated_features.features, weight_softmax, pred_idx[i])
    heatmaps.append(img)

# Print the shape of images and length of heatmaps
print(cur_images.shape, len(heatmaps))

# Print probabilities for each image
proba = []
for i in probabilities.cpu().detach().numpy():
    idx = np.argmax(i)
    proba.append((str(np.round(i[idx] * 100, 2))) + '%')
print(proba)

# Visualize the images and their heatmaps
fig = plt.figure(figsize=(20, 15))
for i in range(len(cur_images)):
    img = cur_images[i]
    mask = heatmaps[i]
    ax = fig.add_subplot(4, 4, i + 1, xticks=[], yticks=[])
    plt.imshow(img)
    plt.imshow(cv2.resize(mask, (512, 512), interpolation=cv2.INTER_LINEAR), alpha=0.5, cmap='jet')
    ax.set_title('Label %d with %s probability' % (labels[i], proba[i]), fontsize=14)

# Position the color bar below the images
cax = fig.add_axes([0.15, 0.05, 0.7, 0.03])  # Adjust the position and size of the color bar
clb = plt.colorbar(cax=cax, orientation='horizontal', ticks=[0, 0.5, 1])
clb.ax.set_title('Level of "attention" NN in making prediction', fontsize=20)
clb.ax.set_xticklabels(['low', 'medium', 'high'], fontsize=18)

plt.show()
